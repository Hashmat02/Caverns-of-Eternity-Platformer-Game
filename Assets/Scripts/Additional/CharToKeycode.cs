using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public static class CharToKeyCode {
	public static Dictionary<char, KeyCode> dict = new Dictionary<char, KeyCode>() { 
		// alphabetical keys, shift is a separate input so no need to consider capitals
		{ 'a', KeyCode.A },
		{ 'b', KeyCode.B },
		{ 'c', KeyCode.C },
		{ 'd', KeyCode.D },
		{ 'e', KeyCode.E },
		{ 'f', KeyCode.F },
		{ 'g', KeyCode.G },
		{ 'h', KeyCode.H },
		{ 'i', KeyCode.I },
		{ 'j', KeyCode.J },
		{ 'k', KeyCode.K },
		{ 'l', KeyCode.L },
		{ 'm', KeyCode.M },
		{ 'n', KeyCode.N },
		{ 'o', KeyCode.O },
		{ 'p', KeyCode.P },
		{ 'q', KeyCode.Q },
		{ 'r', KeyCode.R },
		{ 's', KeyCode.S },
		{ 't', KeyCode.T },
		{ 'u', KeyCode.U },
		{ 'v', KeyCode.V },
		{ 'w', KeyCode.W },
		{ 'x', KeyCode.X },
		{ 'y', KeyCode.Y },
		{ 'z', KeyCode.Z },

		// number keys (numpad is not represented, as number inputs are the same)
		{ '1', KeyCode.Alpha1 },
		{ '2', KeyCode.Alpha2 },
		{ '3', KeyCode.Alpha3 },
		{ '4', KeyCode.Alpha4 },
		{ '5', KeyCode.Alpha5 },
		{ '6', KeyCode.Alpha6 },
		{ '7', KeyCode.Alpha7 },
		{ '8', KeyCode.Alpha8 },
		{ '9', KeyCode.Alpha9 },
		{ '0', KeyCode.Alpha0 },

		// special characters
		{ ' ', KeyCode.Space },
		{ '!', KeyCode.Exclaim },
		{ '"', KeyCode.DoubleQuote },
		{ '#', KeyCode.Hash },
		{ '$', KeyCode.Dollar },
		{ '&', KeyCode.Ampersand },
		{ '\'', KeyCode.Quote },
		{ '(', KeyCode.LeftParen },
		{ ')', KeyCode.RightParen },
		{ '*', KeyCode.Asterisk },
		{ '+', KeyCode.Plus },
		{ ',', KeyCode.Comma },
		{ '-', KeyCode.Minus },
		{ '.', KeyCode.Period },
		{ '/', KeyCode.Slash },
		{ ':', KeyCode.Colon },
		{ ';', KeyCode.Semicolon },
		{ '<', KeyCode.Less },
		{ '=', KeyCode.Equals },
		{ '>', KeyCode.Greater },
		{ '?', KeyCode.Question },
		{ '@', KeyCode.At },
		{ '[', KeyCode.LeftBracket },
		{ '\\', KeyCode.Backslash },
		{ ']', KeyCode.RightBracket },
		{ '^', KeyCode.Caret },
		{ '_', KeyCode.Underscore },
		{ '`', KeyCode.BackQuote },
	};
}
